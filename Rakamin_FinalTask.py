{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNVlqEBPYJRU9De9zTrv9MN",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/jazzlynamelia/Rakamin-PBI-IDX-Data-Scientist/blob/main/Rakamin_FinalTask.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 0. Import Libraries & Load Data\n",
        "# ===============================\n",
        "\n",
        "# Import Library\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from imblearn.over_sampling import SMOTE\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from xgboost import XGBClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import classification_report, roc_auc_score\n",
        "\n",
        "# 1. Data Loading & Initial Preparation\n",
        "# =====================================\n",
        "\n",
        "# Load data\n",
        "df = pd.read_csv('loan_data_2007_2014 (1).csv', low_memory=False)\n",
        "print(\"Data berhasil dimuat.\\n\")\n",
        "\n",
        "# Membuat kolom target 'credit_risk'\n",
        "# 1 untuk pinjaman buruk ('Charged Off')\n",
        "# 0 untuk pinjaman baik (semua status lainnya, yang nanti akan difilter)\n",
        "df['credit_risk'] = df['loan_status'].apply(lambda x: 1 if x == 'Charged Off' else 0)\n",
        "\n",
        "# Filter dataset untuk hanya menyertakan pinjaman yang sudah selesai\n",
        "# ('Fully Paid' -> Baik, 'Charged Off' -> Buruk)\n",
        "df_filtered = df[df['loan_status'].isin(['Fully Paid', 'Charged Off'])]\n",
        "print(f\"Ukuran dataset setelah memfilter 'loan_status': {df_filtered.shape}\")\n",
        "print(\"Kolom 'credit_risk' berhasil dibuat.\\n\")\n",
        "\n",
        "\n",
        "# 2. Data Preparation / Preprocessing\n",
        "# ===================================\n",
        "\n",
        "# Membuat dataframe baru agar data asli tetap aman\n",
        "df_prep = df_filtered.copy()\n",
        "print(f\"Ukuran data awal untuk preprocessing: {df_prep.shape}\")\n",
        "\n",
        "## A. Menghapus Fitur (Feature Dropping)\n",
        "# Berdasarkan analisis EDA, beberapa kolom akan dihapus\n",
        "kolom_dihapus = [\n",
        "    # Kebocoran Data (Informasi masa depan)\n",
        "    'recoveries', 'collection_recovery_fee', 'issue_d', 'pymnt_plan', 'out_prncp', 'total_pymnt', 'last_pymnt_amnt', 'last_pymnt_d', 'next_pymnt_d', 'last_credit_pull_d', 'total_rec_late_fee',\n",
        "\n",
        "    # Multikolinearitas\n",
        "    'funded_amnt', 'funded_amnt_inv', # Redundan dengan loan_amnt\n",
        "    'total_pymnt_inv', 'total_rec_prncp', 'total_rec_int', # Redundan dengan total_pymnt\n",
        "    'out_prncp_inv', # Redundan dengan out_prncp\n",
        "\n",
        "    # Tidak Relevan / ID / Teks Bebas\n",
        "    'Unnamed: 0', 'id', 'member_id', 'emp_title', 'url', 'desc', 'title', 'zip_code',\n",
        "\n",
        "    # Kolom target asli (sudah digantikan 'credit_risk')\n",
        "    'loan_status',\n",
        "\n",
        "    # Mengandung informasi yang sudah ada\n",
        "    'grade'\n",
        "]\n",
        "df_prep = df_prep.drop(columns=kolom_dihapus, axis=1)\n",
        "print(f\"Ukuran data setelah menghapus {len(kolom_dihapus)} kolom: {df_prep.shape}\")\n",
        "\n",
        "## B. Menangani Missing Values (Nilai Kosong)\n",
        "# Hitung persentase missing values untuk setiap kolom\n",
        "missing_percentage = (df_prep.isnull().sum() / len(df_prep)) * 100\n",
        "# Filter untuk mendapatkan daftar kolom yang > 40% kosong\n",
        "kolom_dihapus_otomatis = missing_percentage[missing_percentage > 40].index\n",
        "# Hapus kolom-kolom tersebut dari dataframe\n",
        "df_prep = df_prep.drop(columns=kolom_dihapus_otomatis)\n",
        "\n",
        "# Mengisi nilai kosong pada emp_length dengan modus (cocok untuk niali kategorikal)\n",
        "df_prep['emp_length'] = df_prep['emp_length'].fillna(df_prep['emp_length'].mode()[0])\n",
        "\n",
        "# Menghapus baris yang masih memiliki nilai kosong (jumlahnya sedikit)\n",
        "df_prep = df_prep.dropna()\n",
        "print(f\"Ukuran data setelah menangani missing values: {df_prep.shape}\")\n",
        "\n",
        "## C. Feature Engineering & Transformasi Tipe Data\n",
        "# Mengubah 'term' dari ' 36 months' menjadi angka 36\n",
        "df_prep['term'] = df_prep['term'].apply(lambda term: int(term.split()[0]))\n",
        "\n",
        "# Mengubah 'emp_length' menjadi numerik\n",
        "emp_length_map = {\n",
        "    '< 1 year': 0, '1 year': 1, '2 years': 2, '3 years': 3, '4 years': 4,\n",
        "    '5 years': 5, '6 years': 6, '7 years': 7, '8 years': 8, '9 years': 9,\n",
        "    '10+ years': 10\n",
        "}\n",
        "df_prep['emp_length'] = df_prep['emp_length'].map(emp_length_map)\n",
        "\n",
        "# Mengubah 'earliest_cr_line' (misal: 'Nov-1994') menjadi tahunnya saja (1994)\n",
        "df_prep['earliest_cr_line_year'] = df_prep['earliest_cr_line'].apply(lambda date: int(date.split('-')[1]))\n",
        "df_prep = df_prep.drop('earliest_cr_line', axis=1)\n",
        "\n",
        "## D. Encoding Variabel Kategorikal\n",
        "# Mengidentifikasi kolom object yang akan di-encode\n",
        "kolom_kategorikal = df_prep.select_dtypes(include=['object']).columns\n",
        "# Membuat dummy variables\n",
        "dummies = pd.get_dummies(df_prep[kolom_kategorikal], drop_first=True)\n",
        "df_prep = pd.concat([df_prep.drop(kolom_kategorikal, axis=1), dummies], axis=1)\n",
        "print(f\"Ukuran data setelah encoding: {df_prep.shape}\")\n",
        "\n",
        "## E. Memisahkan Fitur (X) dan Target (y)\n",
        "X = df_prep.drop('credit_risk', axis=1)\n",
        "y = df_prep['credit_risk']\n",
        "\n",
        "## F. Membagi Data (Train & Test Set)\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101, stratify=y)\n",
        "print(\"\\nData dibagi menjadi train dan test set.\")\n",
        "\n",
        "## G. Scaling Fitur Numerik\n",
        "scaler = StandardScaler()\n",
        "# Fit dan transform pada data training\n",
        "X_train = scaler.fit_transform(X_train)\n",
        "# Hanya transform pada data testing\n",
        "X_test = scaler.transform(X_test)\n",
        "print(\"Fitur numerik berhasil discaling.\")\n",
        "\n",
        "# 3. Data Modelling & Evaluation\n",
        "# =================================\n",
        "\n",
        "# Inisialisasi SMOTE\n",
        "smote = SMOTE(random_state=101)\n",
        "# SMOTE hanya diterapkan pada data training\n",
        "X_train_resampled, y_train_resampled = smote.fit_resample(X_train, y_train)\n",
        "print(\"Data training berhasil diseimbangkan dengan SMOTE.\")\n",
        "\n",
        "## A. Logistic Regression\n",
        "print(\"\\n--- Melatih dan Mengevaluasi Logistic Regression ---\")\n",
        "log_model = LogisticRegression(max_iter=1000, random_state=42)\n",
        "log_model.fit(X_train_resampled, y_train_resampled)\n",
        "y_pred_log = log_model.predict(X_test)\n",
        "y_prob_log = log_model.predict_proba(X_test)[:, 1]\n",
        "print(\"\\nClassification Report (Logistic Regression):\")\n",
        "print(classification_report(y_test, y_pred_log))\n",
        "auc_log = roc_auc_score(y_test, y_prob_log)\n",
        "print(f\"ROC-AUC Score (Logistic Regression): {auc_log:.4f}\")\n",
        "\n",
        "## B. XGBoost\n",
        "print(\"\\n--- Melatih dan Mengevaluasi XGBoost ---\")\n",
        "xgb_model = XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42)\n",
        "xgb_model.fit(X_train_resampled, y_train_resampled)\n",
        "y_pred_xgb = xgb_model.predict(X_test)\n",
        "y_prob_xgb = xgb_model.predict_proba(X_test)[:, 1]\n",
        "print(\"\\nClassification Report (XGBoost):\")\n",
        "print(classification_report(y_test, y_pred_xgb))\n",
        "auc_xgb = roc_auc_score(y_test, y_prob_xgb)\n",
        "print(f\"ROC-AUC Score (XGBoost): {auc_xgb:.4f}\")\n",
        "\n",
        "## C. Random Forest\n",
        "print(\"\\n--- Melatih dan Mengevaluasi Random Forest ---\")\n",
        "rf_model = RandomForestClassifier(n_estimators=100, random_state=42)\n",
        "rf_model.fit(X_train_resampled, y_train_resampled)\n",
        "y_pred_rf = rf_model.predict(X_test)\n",
        "y_prob_rf = rf_model.predict_proba(X_test)[:, 1]\n",
        "print(\"\\nClassification Report (Random Forest):\")\n",
        "print(classification_report(y_test, y_pred_rf))\n",
        "auc_rf = roc_auc_score(y_test, y_prob_rf)\n",
        "print(f\"ROC-AUC Score (Random Forest): {auc_rf:.4f}\")\n",
        "\n",
        "print(\"\\n--- Selesai Dijalankan ---\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dmq78GU66JGF",
        "outputId": "f5809f3f-9d68-42b2-d420-e6becc83db09"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Data berhasil dimuat.\n",
            "\n",
            "Ukuran dataset setelah memfilter 'loan_status': (227214, 76)\n",
            "Kolom 'credit_risk' berhasil dibuat.\n",
            "\n",
            "Ukuran data awal untuk preprocessing: (227214, 76)\n",
            "Ukuran data setelah menghapus 27 kolom: (227214, 49)\n",
            "Ukuran data setelah menangani missing values: (163399, 29)\n",
            "Ukuran data setelah encoding: (163399, 124)\n",
            "\n",
            "Data dibagi menjadi train dan test set.\n",
            "Fitur numerik berhasil discaling.\n",
            "Data training berhasil diseimbangkan dengan SMOTE.\n",
            "\n",
            "--- Melatih dan Mengevaluasi Logistic Regression ---\n",
            "\n",
            "Classification Report (Logistic Regression):\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.88      0.63      0.74     39290\n",
            "           1       0.31      0.66      0.42      9730\n",
            "\n",
            "    accuracy                           0.64     49020\n",
            "   macro avg       0.60      0.65      0.58     49020\n",
            "weighted avg       0.77      0.64      0.67     49020\n",
            "\n",
            "ROC-AUC Score (Logistic Regression): 0.7001\n",
            "\n",
            "--- Melatih dan Mengevaluasi XGBoost ---\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.12/dist-packages/xgboost/training.py:183: UserWarning: [14:43:48] WARNING: /workspace/src/learner.cc:738: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  bst.update(dtrain, iteration=i, fobj=obj)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Classification Report (XGBoost):\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.81      0.97      0.89     39290\n",
            "           1       0.48      0.10      0.16      9730\n",
            "\n",
            "    accuracy                           0.80     49020\n",
            "   macro avg       0.65      0.54      0.52     49020\n",
            "weighted avg       0.75      0.80      0.74     49020\n",
            "\n",
            "ROC-AUC Score (XGBoost): 0.6987\n",
            "\n",
            "--- Melatih dan Mengevaluasi Random Forest ---\n",
            "\n",
            "Classification Report (Random Forest):\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.82      0.96      0.88     39290\n",
            "           1       0.44      0.12      0.19      9730\n",
            "\n",
            "    accuracy                           0.80     49020\n",
            "   macro avg       0.63      0.54      0.54     49020\n",
            "weighted avg       0.74      0.80      0.75     49020\n",
            "\n",
            "ROC-AUC Score (Random Forest): 0.6918\n",
            "\n",
            "--- Selesai Dijalankan ---\n"
          ]
        }
      ]
    }
  ]
}